#!/bin/bash

usage () {
  echo "Usage: launcher COMMAND CONFIG [--skip-prereqs] [--skip-discourse-prereqs] [--docker-args STRING]"
  echo "Commands:"
  echo "    start:      Start/initialize a container"
  echo "    stop:       Stop a running container"
  echo "    restart:    Restart a container"
  echo "    destroy:    Stop and remove a container"
  echo "    enter:      Use nsenter to enter a container"
  echo "    logs:       Docker logs for container"
  echo "    bootstrap:  Bootstrap a container for the config based on a template"
  echo "    rebuild:    Rebuild a container (destroy old, bootstrap, start new)"
  echo "    cleanup:    Remove all containers that have stopped for > 24 hours"
  echo "    setup:      Create a new configuration file and bootstrap"
  echo
  echo "Options:"
  echo "    --skip-prereqs             Don't check launcher prerequisites"
  echo "    --skip-discourse-prereqs   Don't check prerequisites specifiy to Discourse"
  echo "    --docker-args              Extra arguments to pass when running docker"
  exit 1
}

[ $# -lt 2 ] && {
  usage
}

command=$1
config=$2
shift 2
user_args=""

while [ ${#} -gt 0 ]; do
  case "$command" in

  --skip-prereqs)
    SKIP_PREREQ="1"
    ;;
  --skip-discourse-prereqs)
    SKIP_DISCOURSE_PREREQS="1"
    ;;
  --docker-args)
    user_args="$2"
    shift
    ;;
  *)
    echo "Unknown options '${1}'"
    usage
    ;;
  esac

  shift 1
done

# Docker doesn't like uppercase characters, spaces or special characters, catch it now before we build everything out and then find out
re='[A-Z/ !@#$%^&*()+~`=]'
if [[ $config =~ $re ]];
  then
    echo
    echo "ERROR: Config name must not contain upper case characters, spaces or special characters. Correct config name and rerun $0."
    echo
    exit 1
fi

cd "$(dirname "$0")"

docker_min_version='1.6.0'
docker_rec_version='1.6.0'
git_min_version='1.8.0'
git_rec_version='1.8.0'

config_file=containers/"$config".yml
cidbootstrap=cids/"$config"_bootstrap.cid
local_discourse=local_discourse
image=discourse/discourse:1.0.17
docker_path=`which docker.io || which docker`
git_path=`which git`
template_path=samples/standalone.yml
changelog=/tmp/changelog # used to test whether sed did anything

if [ "${SUPERVISED}" = "true" ]; then
  restart_policy="--restart=no"
  attach_on_start="-a"
  attach_on_run="-a stdout -a stderr"
else
  attach_on_run="-d"
fi

if [ -n "$DOCKER_HOST" ]; then
  docker_ip=`sed -e 's/^tcp:\/\/\(.*\):.*$/\1/' <<< "$DOCKER_HOST"`
elif [ -x "$(which ip 2>/dev/null)" ]; then
  docker_ip=`ip addr show docker0 | \
                  grep 'inet ' | \
                  awk '{ split($2,a,"/"); print a[1] }';`
else
  docker_ip=`ifconfig | \
                  grep -B1 "inet addr" | \
                  awk '{ if ( $1 == "inet" ) { print $2 } else if ( $2 == "Link" ) { printf "%s:" ,$1 } }' | \
                  grep docker0 | \
                  awk -F: '{ print $3 }';`
fi

compare_version() {
    declare -a ver_a
    declare -a ver_b
    IFS=. read -a ver_a <<< "$1"
    IFS=. read -a ver_b <<< "$2"

    while [[ -n $ver_a ]]; do
        if (( ver_a > ver_b )); then
            return 0
        elif (( ver_b > ver_a )); then
            return 1
        else
            unset ver_a[0]
            ver_a=("${ver_a[@]}")
            unset ver_b[0]
            ver_b=("${ver_b[@]}")
        fi
    done
    return 1  # They are equal
}


install_docker() {

  echo "Docker is not installed, you will need to install Docker in order to run Discourse"
  echo "Please visit https://docs.docker.com/installation/ for instructions on how to do this for your system"
  echo
  echo "If you are running a recent Ubuntu Server, try the following:"
  echo "sudo apt-get install docker-engine"

  exit 1
}

check_prereqs() {

  if [ -z $docker_path ]; then
    install_docker
  fi

  # 1. docker daemon running?
  # we send stderr to /dev/null cause we don't care about warnings,
  # it usually complains about swap which does not matter
  test=`$docker_path info 2> /dev/null`
  if [[ $? -ne 0 ]] ; then
    echo "Cannot connect to the docker daemon - verify it is running and you have access"
    exit 1
  fi

  # 2. running aufs or btrfs
  test=`$docker_path info 2> /dev/null | grep 'Driver: '`
  if [[ "$test" =~ [aufs|btrfs|zfs|overlay] ]] ; then : ; else
    echo "Your Docker installation is not using a supported filesystem if we were to proceed you may have a broken install."
    echo "aufs is the recommended filesystem you should be using (zfs/btrfs and overlay may work as well)"
    echo "You can tell what filesystem you are using by running \"docker info\" and looking at the driver"
    echo
    echo "If you wish to continue anyway using your existing unsupported filesystem, "
    echo "read the source code of launcher and figure out how to bypass this."
    exit 1
  fi

  # 3. running recommended docker version
  test=($($docker_path --version))  # Get docker version string
  test=${test[2]//,/}  # Get version alone and strip comma if exists

  # At least minimum docker version
  if compare_version "${docker_min_version}" "${test}"; then
    echo "ERROR: Docker version ${test} not supported, please upgrade to at least ${docker_min_version}, or recommended ${docker_rec_version}"
    exit 1
  fi

  # Recommend newer docker version
  if compare_version "${docker_rec_version}" "${test}"; then
    echo "WARNING: Docker version ${test} deprecated, recommend upgrade to ${docker_rec_version} or newer."
  fi

  # 4. discourse docker image is downloaded
  test=`$docker_path images | awk '{print $1 ":" $2 }' | grep "$image"`

  if [ -z "$test" ]; then
    echo
    echo "WARNING: We are about to start downloading the Discourse base image"
    echo "This process may take anywhere between a few minutes to an hour, depending on your network speed"
    echo
    echo "Please be patient"
    echo

  fi

  # 5. running recommended git version
  test=($($git_path --version))  # Get git version string
  test=${test[2]//,/}  # Get version alone and strip comma if exists

  # At least minimum version
  if compare_version "${git_min_version}" "${test}"; then
    echo "ERROR: Git version ${test} not supported, please upgrade to at least ${git_min_version}, or recommended ${git_rec_version}"
    exit 1
  fi

  # Recommend best version
  if compare_version "${git_rec_version}" "${test}"; then
    echo "WARNING: Git version ${test} deprecated, recommend upgrade to ${git_rec_version} or newer."
  fi

  # 6. able to attach stderr / out / tty
  test=`$docker_path run $user_args -i --rm -a stdout -a stderr $image echo working`
  if [[ "$test" =~ "working" ]] ; then : ; else
    echo "Your Docker installation is not working correctly"
    echo
    echo "See: https://meta.discourse.org/t/docker-error-on-bootstrap/13657/18?u=sam"
    exit 1
  fi

}



check_resources() {
  # Memory
  resources="ok"
  avail_mem="$(LANG=C free -m | grep '^Mem:' | awk '{print $2}')"
  if [ "$avail_mem" -lt 900 ]; then
    resources="insufficient"
    echo "WARNING: You do not appear to have sufficient memory to run Discourse."
    echo
    echo "Your system may not work properly, or future upgrades of Discourse may"
    echo "not complete successfully."
    echo
    echo "See https://github.com/discourse/discourse/blob/master/docs/INSTALL-cloud.md#create-new-cloud-server"
  elif [ "$avail_mem" -lt 1800 ]; then
    total_swap="$(LANG=C free -m | grep ^Swap: | awk '{print $2}')"
    if [ "$total_swap" -lt 1000 ]; then
      resources="insufficient"
      echo "WARNING: You must have at least 1GB of swap when running with less"
      echo "than 2GB of RAM."
      echo
      echo "Your system may not work properly, or future upgrades of Discourse may"
      echo "not complete successfully."
      echo
      echo "See https://github.com/discourse/discourse/blob/master/docs/INSTALL-cloud.md#set-up-swap-if-needed"
    fi
  fi

  # Disk space
  free_disk="$(df /var | tail -n 1 | awk '{print $4}')"
  if [ "$free_disk" -lt 5000 ]; then
    resources="insufficient"
    echo "WARNING: You must have at least 5GB of *free* disk space to run Discourse."
    echo
    echo "Insufficient disk space may result in problems running your site, and may"
    echo "not even allow Discourse installation to complete successfully."
    echo
    echo "Please free up some space, or expand your disk, before continuing."
    echo
    echo "Run \`apt-get autoremove && apt-get autoclean\` to clean up unused packages and \`./launcher cleanup\` to remove stale Docker containers."
    exit 1
  fi

  if [ -t 0 ] && [ "$resources" != "ok" ]; then
    echo
    read -p "Press ENTER to continue, or Ctrl-C to exit and give your system more resources"
  fi
}

check_ports() {
  local valid=$(netstat -tln | awk '{print $4}' | grep ":${1}\$")

  if [ -n "$valid" ]; then
    echo "Launcher has detected that port ${1} is in use."
    echo
    echo "If you are trying to run Discourse simultaneously with another web server like Apache or nginx, you will need to bind to a different port."
    echo "See https://meta.discourse.org/t/17247 for help."
    echo "To continue anyway, re-run Launcher with --skip-prereqs"
    exit 1
  fi
}

if [ -z "$SKIP_PREREQS" ] ; then
  check_prereqs
fi

host_run() {
  read -r -d '' env_ruby << 'RUBY'
  require 'yaml'

  input = STDIN.readlines.join
  yaml = YAML.load(input)

  if host_run = yaml['host_run']
    params = yaml['params'] || {}
    host_run.each do |run|
      params.each do |k,v|
        run = run.gsub("$#{k}", v)
      end
      STDOUT.write "#{run}--SEP--"
    end
  end
RUBY

  host_run=`cat $config_file | $docker_path run $user_args --rm -i -a stdout -a stdin $image ruby -e "$env_ruby"`

  while [ "$host_run" ] ; do
    iter=${host_run%%--SEP--*}
    echo
    echo "Host run: $iter"
    $iter || exit 1
    echo
    host_run="${host_run#*--SEP--}"
  done
}


set_volumes() {
  volumes=`cat $config_file | $docker_path run $user_args --rm -i -a stdout -a stdin $image ruby -e \
        "require 'yaml'; puts YAML.load(STDIN.readlines.join)['volumes'].map{|v| '-v ' << v['volume']['host'] << ':' << v['volume']['guest'] << ' '}.join"`
}

set_links() {
    links=`cat $config_file | $docker_path run $user_args --rm -i -a stdout -a stdin $image ruby -e \
        "require 'yaml'; puts YAML.load(STDIN.readlines.join)['links'].map{|l| '--link ' << l['link']['name'] << ':' << l['link']['alias'] << ' '}.join"`
}

set_template_info() {

    templates=`cat $config_file | $docker_path run $user_args --rm -i -a stdin -a stdout $image ruby -e \
      "require 'yaml'; puts YAML.load(STDIN.readlines.join)['templates']"`

    arrTemplates=(${templates// / })
    config_data=$(cat $config_file)

    input="hack: true"

    for template in "${arrTemplates[@]}"
    do
      [ ! -z $template ] && {
        input="$input _FILE_SEPERATOR_ $(cat $template)"
      }
    done

    # we always want our config file last so it takes priority
    input="$input _FILE_SEPERATOR_ $config_data"

    read -r -d '' env_ruby << 'RUBY'
    require 'yaml'

    input=STDIN.readlines.join
    # default to UTF-8 for the dbs sake
    env = {'LANG' => 'en_US.UTF-8'}
    input.split('_FILE_SEPERATOR_').each do |yml|
       yml.strip!
       begin
         env.merge!(YAML.load(yml)['env'] || {})
       rescue Psych::SyntaxError => e
        puts e
        puts "*ERROR."
       rescue => e
        puts yml
        p e
       end
    end
    puts env.map{|k,v| "-e\n#{k}=#{v}" }.join("\n")
RUBY

    raw=`exec echo "$input" | $docker_path run $user_args --rm -i -a stdin -a stdout $image ruby -e "$env_ruby"`

    env=()
    ok=1
    while read i; do
      if [ "$i" == "*ERROR." ]; then
        ok=0
      elif [ -n "$i" ]; then
        env[${#env[@]}]=$i
      fi
    done <<< "$raw"

    if [ "$ok" -ne 1 ]; then
      echo "${env[@]}"
      echo "YAML syntax error. Please check your /var/discourse/containers/*.yml config files."
      exit 1
    fi
}

if [ -z $docker_path ]; then
  install_docker
fi

[ "$command" == "cleanup" ] && {
  echo
  echo "The following command will"
  echo "- Delete all docker images for old containers"
  echo "- Delete all stopped and orphan containers"
  echo
  read -p "Are you sure (Y/n): " -n 1 -r && echo
  if [[ $REPLY =~ ^[Yy]$ || ! $REPLY ]]
    then
      space=$(df /var/lib/docker | awk '{ print $4 }' | grep -v Available)
      echo "Starting Cleanup (bytes free $space)"

      STATE_DIR=./.gc-state scripts/docker-gc

      space=$(df /var/lib/docker | awk '{ print $4 }' | grep -v Available)
      echo "Finished Cleanup (bytes free $space)"

    else
      exit 1
  fi
  exit 0
}

if [[ ! -e $config_file ]]
  then
    echo "Config file was not found, ensure $config_file exists"
    echo
    echo "Available configs ( `cd containers && ls -dm *.yml | tr -s '\n' ' ' | awk '{ gsub(/\.yml/, ""); print }'`)"
    exit 1
fi

docker_version=($($docker_path --version))
docker_version=${test[2]//,/}
restart_policy=${restart_policy:---restart=always}

set_existing_container(){
  existing=`$docker_path ps -a | awk '{ print $1, $(NF) }' | grep " $config$" | awk '{ print $1 }'`
}

run_stop() {

  set_existing_container

  if [ ! -z $existing ]
     then
       (
        set -x
        $docker_path stop -t 10 $config
       )
     else
       echo "$config was not started !"
       exit 1
  fi
}

set_run_image() {
  run_image=`cat $config_file | $docker_path run $user_args --rm -i -a stdin -a stdout $image ruby -e \
    "require 'yaml'; puts YAML.load(STDIN.readlines.join)['run_image']"`

  if [ -z "$run_image" ]; then
    run_image="$local_discourse/$config"
  fi
}

set_boot_command() {
  boot_command=`cat $config_file | $docker_path run $user_args --rm -i -a stdin -a stdout $image ruby -e \
    "require 'yaml'; puts YAML.load(STDIN.readlines.join)['boot_command']"`

  if [ -z "$boot_command" ]; then

    no_boot_command=`cat $config_file | $docker_path run $user_args --rm -i -a stdin -a stdout $image ruby -e \
      "require 'yaml'; puts YAML.load(STDIN.readlines.join)['no_boot_command']"`

    if [ -z "$no_boot_command" ]; then
      boot_command="/sbin/boot"
    fi
  fi
}

scale_ram_and_cpu() {

  # grab info about total system ram and physical (NOT LOGICAL!) CPU cores
  avail_mem="$(LANG=C free -m | grep '^Mem:' | awk '{print $2}')"
  avail_gb=$(( $avail_mem / 950 ))
  avail_cores=`cat /proc/cpuinfo | grep "cpu cores" | uniq | awk '{print $4}'`
  echo "Found ${avail_gb}GB of memory and $avail_cores physical CPU cores"

  # db_shared_buffers: 128MB for 1GB, 256MB for 2GB, or 256MB * GB, max 4096MB
  if [ "$avail_gb" -eq "1" ]
  then
    db_shared_buffers=128
  else
    if [ "$avail_gb" -eq "2" ]
    then
      db_shared_buffers=256
    else
      db_shared_buffers=$(( 256 * $avail_gb ))
    fi
  fi
  db_shared_buffers=$(( db_shared_buffers < 4096 ? db_shared_buffers : 4096 ))

  sed -i -e "s/^  #db_shared_buffers:.*/  db_shared_buffers: \"${db_shared_buffers}MB\"/w $changelog" $config_file
  if [ -s $changelog ]
  then
    echo "setting db_shared_buffers = ${db_shared_buffers}MB based on detected CPU/RAM"
    rm $changelog
  fi


  # UNICORN_WORKERS: 2 * GB for 2GB or less, or 2 * CPU, max 8
  if [ "$avail_gb" -le "2" ]
  then
    unicorn_workers=$(( 2 * $avail_gb ))
  else
    unicorn_workers=$(( 2 * $avail_cores ))
  fi
  unicorn_workers=$(( unicorn_workers < 8 ? unicorn_workers : 8 ))

  sed -i -e "s/^  #UNICORN_WORKERS:.*/  UNICORN_WORKERS: ${unicorn_workers}/w $changelog" $config_file
  if [ -s $changelog ]
  then
      echo "setting UNICORN_WORKERS = ${unicorn_workers} based on detected CPU/RAM"
      rm $changelog
  fi

}

set_config() {
  if [ -f $config_file ]
  then
      echo $config_file exists already. 
      echo To remove it use: rm $config_file
      exit 1
  fi
  cp ./samples/standalone.yml $config_file
  if [ ! -f $config_file ]
  then
      echo Unable to copy $config_file. Are you root?
      exit 1
  fi

  local hostname="discourse.example.com"
  local developer_emails="me@example.com"
  local smtp_address="smtp.example.com"
  local smtp_user_name="user@example.com"
  local smtp_password="pa\$\$word"
  local letsencrypt_account_email="your.email@example.com"
  local letsencrypt_status="change to enable"

  local new_value=""
  local letsencrypt_status="change to enable"
  local config_sane="n"
  local config_ok="n"
  local update_ok="y"

  while [[ "$config_ok" == "n" || "$config_sane" == "n" ]]
  do
    if [ ! -z $hostname ]
    then
	read -p "hostname: [$hostname]: " new_value
	if [ ! -z $new_value ]
	then
	    hostname=$new_value
	else
	  echo "Unchanged."
	fi
    fi 
    if [ ! -z $developer_emails ]
    then
	read -p "developer_emails [$developer_emails]: " new_value
	if [ ! -z $new_value ]
	then
	    developer_emails=$new_value
	fi
    fi
    if [ ! -z $smtp_address ]
    then
	read -p "smtp_address [$smtp_address]: " new_value
	if [ ! -z $new_value ]
	then
	    smtp_address=$new_value
	fi
    fi
    if [ "$smtp_address" == "smtp.sparkpostmail.com" ]
    then
	smtp_user_name="SMTP_Injection"
	
    fi
    if [ "$smtp_address" == "smtp.sendgrid.net" ]
    then
	smtp_user_name="apikey"
    fi
    if [ ! -z $smtp_user_name ]
    then
	read -p "smtp_user_name [$smtp_user_name]: " new_value
	if [ ! -z $new_value ]
	then
	    smtp_user_name=$new_value
	fi
    fi
    if [ ! -z $smtp_password ]
    then
	read -p "smtp_password [$smtp_password]: " new_value
	if [ ! -z $new_value ]
	then
	    smtp_password=$new_value
	fi
    fi
    if [ ! -z $letsencrypt_account_email ]
    then
	read -p "letsencrypt_account_email ($letsencrypt_status) [$letsencrypt_account_email]: " new_value
	if [ ! -z $new_value ]
	then
	    letsencrypt_account_email=$new_value
	    if [ "$new_value" == "off" ]
	    then
		letsencrypt_status="change to enable"
	    else
	      letsencrypt_status="Enter 'OFF' to disable."
	      echo "Letsencrypt enabled."
	    fi
	else
	  echo "letsencrypt unchanged"
	fi
    fi

    #TODO sanity check these values.  For now we trust the user's input.
    config_sane="y"

    if [ "$config_sane" == "y" ]
    then
	echo -e "\nThat's it! Everything is set. Read carefully before continuing.\n"
    else
      echo "Errors found in settings"
    fi

    echo "DISCOURSE_HOSTNAME: $hostname"
    echo "DISCOURSE_DEVELOPER_EMAILS: $developer_emails"
    echo "DISCOURSE_SMTP_ADDRESS: $smtp_address"
    echo "DISCOURSE_SMTP_USER_NAME: $smtp_user_name"
    echo "DISCOURSE_SMTP_PASSWORD: $smtp_password"
    if [ "$letsencrypt_status" == "Enter 'OFF' to disable." ]
    then
	echo "LETSENCRYPT_ACCOUNT_EMAIL: $letsencrypt_account_email"
	echo "LETSENCRYPT will be enabled."
    else
      echo "LETSENCRYPT will not be enabled."
    fi
    echo 
    read -p "Enter to write these settings to $config_file, 'N' to retry, or ^C to start again: " config_ok
  done

  echo -e "\nWriting changes to $config_file:"
  sed -i -e "s/^  DISCOURSE_HOSTNAME: 'discourse.example.com'/  DISCOURSE_HOSTNAME: $hostname/w $changelog" $config_file
  if [ -s $changelog ]
  then
      cat $changelog
      rm $changelog
  else
    echo DISCOURSE_HOSTNAME change failed.
    update_ok="n"  
  fi

  sed -i -e "s/^  DISCOURSE_DEVELOPER_EMAILS:.*/  DISCOURSE_DEVELOPER_EMAILS: \'$developer_emails\'/w $changelog" $config_file
  if [ -s $changelog ]
  then
      cat $changelog
      rm $changelog
  else
    echo DISCOURSE_DEVELOPER_EMAILS change failed.
    update_ok="n"  
  fi

  sed -i -e "s/^  DISCOURSE_SMTP_ADDRESS: smtp.example.com.*/  DISCOURSE_SMTP_ADDRESS: $smtp_address/w $changelog" $config_file
  if [ -s $changelog ]
  then
      cat $changelog
      rm $changelog
  else
    echo DISCOURSE_SMTP_ADDRESS change failed.
    update_ok="n"  
  fi

  sed -i -e "s/^  #DISCOURSE_SMTP_USER_NAME: user@example.com.*/  DISCOURSE_SMTP_USER_NAME: $smtp_user_name/w $changelog" $config_file
  if [ -s $changelog ]
  then
      cat $changelog
      rm $changelog
  else
    echo DISCOURSE_SMTP_USER_NAME change failed.
    update_ok="n"  
  fi

  sed -i -e "s/^  #DISCOURSE_SMTP_PASSWORD: pa\$\$word.*/  DISCOURSE_SMTP_PASSWORD: $smtp_password/w $changelog" $config_file
  if [ -s $changelog ]
  then
      cat $changelog
      rm $changelog
  else
    echo DISCOURSE_SMTP_PASSWORD change failed.
    update_ok="n"  
  fi

  if [ "$letsencrypt_status" != "change to enable" ]
  then
      sed -i -e "s/^  #LETSENCRYPT_ACCOUNT_EMAIL: your.email@example.com/  LETSENCRYPT_ACCOUNT_EMAIL: $letsencrypt_account_email/w $changelog" $config_file
      if [ -s $changelog ]
      then
	  cat $changelog
	  rm $changelog
      else
	echo LETSENCRYPT_ACCOUNT_EMAIL change failed.
	update_ok="n"   
      fi
      local src='^  #- "templates\/web.ssl.template.yml"'
      local dst='  \- "templates\/web.ssl.template.yml"'
      sed -i -e "s/$src/$dst/w $changelog" $config_file
      if [ -s $changelog ]
      then
	  echo "  web.ssl.template.yml enabled"
      else
	update_ok="n"  
	echo "  web.ssl.template.yml NOT ENABLED--was it on already?"
      fi
      local src='^  #- "templates\/web.letsencrypt.ssl.template.yml"'
      local dst='  - "templates\/web.letsencrypt.ssl.template.yml"'
  
      sed -i -e "s/$src/$dst/w $changelog" $config_file
      if [ -s $changelog ]
      then
	  echo "  letsencrypt.ssl.template.yml enabled"
      else
	update_ok="n"  
	echo "letsencrypt.ssl.template.yml NOT ENABLED--was it on already?"
      fi
  fi # enable letsencrypt

  if [ "$update_ok" == "y" ]
  then
      echo -e "\n$config_file updated successfully."
  else
    echo -e "There was an error changing the configuration.\n"
  fi
}

run_start() {

   existing=`$docker_path ps | awk '{ print $1, $(NF) }' | grep " $config$" | awk '{ print $1 }'`
   echo $existing
   if [ ! -z $existing ]
   then
     echo "Nothing to do, your container has already started!"
     exit 0
   fi

   existing=`$docker_path ps -a | awk '{ print $1, $(NF) }' | grep " $config$" | awk '{ print $1 }'`
   if [ ! -z $existing ]
   then
     echo "starting up existing container"
     (
       set -x
       $docker_path start $config
     )
     exit 0
   fi

   host_run

  if [ -z "$SKIP_DISCOURSE_PREREQS" ] ; then
    ports=`cat $config_file | $docker_path run $user_args --rm -i -a stdout -a stdin $image ruby -e \
          "require 'yaml'; puts YAML.load(STDIN.readlines.join)['expose'].map{|p| \"-p #{p}\"}.join(' ')"`

    IFS='-p ' read -a array <<< "$ports"
    for element in "${array[@]}"
    do
     IFS=':' read -a args <<< "$element"
     if [ "${#args[@]}" == "2" ]; then
       check_ports "${args[0]}"
     elif [ "${#args[@]}" == "3" ]; then
       check_ports "${args[1]}"
     fi
    done
  fi

   docker_args=`cat $config_file | $docker_path run $user_args --rm -i -a stdout -a stdin $image ruby -e \
          "require 'yaml'; puts YAML.load(STDIN.readlines.join)['docker_args']"`

   set_template_info
   set_volumes
   set_links
   set_run_image
   set_boot_command

   # get hostname and settings from container configuration
   for envar in "${env[@]}"
   do
     if [[ $envar == DOCKER_USE_HOSTNAME* ]] || [[ $envar == DISCOURSE_HOSTNAME* ]]
     then
       # use as environment variable
       eval $envar
     fi
   done

   (
     hostname=`hostname -s`
     # overwrite hostname
     if [ "$DOCKER_USE_HOSTNAME" = "true" ]
     then
       hostname=$DISCOURSE_HOSTNAME
     else
       hostname=$hostname-$config
     fi

     # we got to normalize so we only have allowed strings, this is more comprehensive but lets see how bash does first
     # hostname=`$docker_path run $user_args --rm $image ruby -e 'print ARGV[0].gsub(/[^a-zA-Z-]/, "-")' $hostname`
     # docker added more hostname rules
     hostname=${hostname/_/-}

     set -x
     $docker_path run $user_args $links $attach_on_run $restart_policy "${env[@]}" -h "$hostname" \
        -e DOCKER_HOST_IP=$docker_ip --name $config -t $ports $volumes $docker_args $run_image $boot_command

   )
   exit 0

}

valid_config_check() {

  valid_config="y"
  for x in DISCOURSE_SMTP_ADDRESS DISCOURSE_SMTP_USER_NAME DISCOURSE_SMTP_PASSWORD \
           DISCOURSE_DEVELOPER_EMAILS DISCOURSE_HOSTNAME
  do
    mail_var=`grep "^  $x:" $config_file`
    local result=$?
    local default="example.com"
    if (( result == 0 ))
    then
      if [[ $mail_var = *"$default"* ]]
      then
        echo "Warning: $x left at incorrect default of example.com"
        valid_config="n"
      fi
    else
      echo "Warning: $x not configured"
      valid_config="n"
    fi
  done
  if [ -t 0 ] && [ "$valid_config" != "y" ]; then
    echo
    read -p "Press Ctrl-C to exit and edit $config_file or ENTER to continue"
  fi
}

run_bootstrap() {
  if [ -z "$SKIP_DISCOURSE_PREREQS" ] ; then
    # Does your system meet the minimum requirements?
    check_resources

    # is our configuration file valid?
    valid_config_check

    # make minor scaling adjustments for RAM and CPU
    scale_ram_and_cpu
  fi

  # I got no frigging clue what this does, ask Sam Saffron. It RUNS STUFF ON THE HOST I GUESS?
  host_run

  # Is the image available?
  # If not, pull it here so the user is aware what's happening.
  $docker_path history $image >/dev/null 2>&1 || $docker_path pull $image

  set_template_info

  base_image=`cat $config_file | $docker_path run $user_args --rm -i -a stdin -a stdout $image ruby -e \
    "require 'yaml'; puts YAML.load(STDIN.readlines.join)['base_image']"`

  update_pups=`cat $config_file | $docker_path run $user_args --rm -i -a stdin -a stdout $image ruby -e \
    "require 'yaml'; puts YAML.load(STDIN.readlines.join)['update_pups']"`

  if [[ ! X"" = X"$base_image" ]]; then
    image=$base_image
  fi

  set_volumes
  set_links

  rm -f $cidbootstrap

  run_command="cd /pups &&"
  if [[ ! "false" =  $update_pups ]]; then
    run_command="$run_command git pull &&"
  fi
  run_command="$run_command /pups/bin/pups --stdin"

  echo $run_command

  (exec echo "$input" | $docker_path run $user_args $links "${env[@]}" -e DOCKER_HOST_IP=$docker_ip --cidfile $cidbootstrap -i -a stdin -a stdout -a stderr $volumes $image \
     /bin/bash -c "$run_command") \
     || ($docker_path rm `cat $cidbootstrap` && rm $cidbootstrap)

  [ ! -e $cidbootstrap ] && echo "** FAILED TO BOOTSTRAP ** please scroll up and look for earlier error messages, there may be more than one" && exit 1

  sleep 5

  $docker_path commit `cat $cidbootstrap` $local_discourse/$config || echo 'FAILED TO COMMIT'
  $docker_path rm `cat $cidbootstrap` && rm $cidbootstrap
}



case "$command" in
  bootstrap)
      run_bootstrap
      echo "Successfully bootstrapped, to startup use ./launcher start $config"
      exit 0
      ;;

  setup)
      set_config
      read -p "Press ENTER to continue, or Ctrl-C to exit to check $config_file"
      run_bootstrap
      exit 0
      ;;

  enter)
      exec $docker_path exec -it $config /bin/bash --login
      ;;

  stop)
      run_stop
      exit 0
      ;;

  logs)

      $docker_path logs $config
      exit 0
      ;;

  restart)
      run_stop
      run_start
      exit 0
      ;;

  start)
      run_start
      exit 0
      ;;

  rebuild)
      if [ "$(git symbolic-ref --short HEAD)" == "master" ]; then
        echo "Ensuring discourse docker is up to date"

        git remote update

        LOCAL=$(git rev-parse @)
        REMOTE=$(git rev-parse @{u})
        BASE=$(git merge-base @ @{u})

        if [ $LOCAL = $REMOTE ]; then
          echo "Discourse Docker is up-to-date"

        elif [ $LOCAL = $BASE ]; then
          echo "Updating Discourse Docker"
          git pull || (echo 'failed to update' && exit 1)
          exec /bin/bash $0 $@

        elif [ $REMOTE = $BASE ]; then
          echo "Your version of Discourse Docker is ahead of origin"

        else
          echo "Discourse Docker has diverged source, this is only expected in Dev mode"
        fi

      fi

      set_existing_container

      if [ ! -z $existing ]
        then
          echo "Stopping old container"
          (
            set -x
            $docker_path stop -t 10 $config
          )
      fi

      run_bootstrap

      if [ ! -z $existing ]
        then
          echo "Removing old container"
          (
            set -x
            $docker_path rm $config
          )
      fi

      run_start
      exit 0
      ;;


  destroy)
      (set -x; $docker_path stop -t 10 $config && $docker_path rm $config) || (echo "$config was not found" && exit 0)
      exit 0
      ;;
esac

usage
