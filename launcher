#!/bin/bash

command=$1
config=$2
opt=$3

cd "$(dirname "$0")"

docker_min_version='0.9.1'
docker_rec_version='0.11.0'

config_file=containers/"$config".yml
local_discourse=local_discourse
image=samsaffron/discourse:0.2.0
docker_path=`which docker.io || which docker`

docker_ip=`/sbin/ifconfig | \
                grep -B1 "inet addr" | \
                awk '{ if ( $1 == "inet" ) { print $2 } else if ( $2 == "Link" ) { printf "%s:" ,$1 } }' | \
                grep docker0 | \
                awk -F: '{ print $3 }';`


usage () {
  echo "Usage: launcher COMMAND CONFIG [--skip-prereqs]"
  echo "Commands:"
  echo "    start:      Start/initialize a container"
  echo "    stop:       Stop a running container"
  echo "    restart:    Restart a container"
  echo "    destroy:    Stop and remove a container"
  echo "    ssh:        Start a bash shell in a running container"
  echo "    logs:       Docker logs for container"
  echo "    mailtest:   Test the mail settings in a container"
  echo "    bootstrap:  Bootstrap a container for the config based on a template"
  echo "    rebuild:    Rebuild a container (destroy old, bootstrap, start new)"
  echo
  echo "Options:"
  echo "    --skip-prereqs   Don't check prerequisites"
  exit 1
}

compare_version() {
    declare -a ver_a
    declare -a ver_b
    IFS=. read -a ver_a <<< "$1"
    IFS=. read -a ver_b <<< "$2"

    while [[ -n $ver_a ]]; do
        if (( ver_a > ver_b )); then
            return 0
        elif (( ver_b > ver_a )); then
            return 1
        else
            unset ver_a[0]
            ver_a=("${ver_a[@]}")
            unset ver_b[0]
            ver_b=("${ver_b[@]}")
        fi
    done
    return 1  # They are equal
}

prereqs() {

  # 1. docker daemon running?
  test=`$docker_path info >/dev/null`

  if [[ $? -ne 0 ]] ; then
    echo "Cannot connect to the docker daemon - verify it is running and you have access"
    exit 1
  fi

  # 2. running recommended docker version
  test=($($docker_path --version))  # Get docker version string
  test=${test[2]//,/}  # Get version alone and strip comma if exists

  # At least minimum version
  if compare_version "${socker_min_version}" "${test}"; then
    echo "ERROR: Docker version ${test} not supported, please upgrade to at least ${docker_min_version}, or recommended ${docker_rec_version}"
    exit 1
  fi

  # Recommend best version
  if compare_version "${docker_rec_version}" "${test}"; then
    echo "WARNING: Docker version ${test} deprecated, recommend upgrade to ${docker_rec_version} or newer."
  fi

  # 3. able to attach stderr / out / tty
  test=`$docker_path run -i --rm -a stdout -a stderr $image echo working`
  if [[ "$test" =~ "working" ]] ; then : ; else
    echo "Your Docker installation is not working correctly"
    echo
    echo "See: https://meta.discourse.org/t/docker-error-on-bootstrap/13657/18?u=sam"
    exit 1
  fi
}

if [ "$opt" != "--skip-prereqs" ] ; then
  prereqs
fi

get_ssh_pub_key() {
  if tty -s ; then
    if [[ ! -e ~/.ssh/id_rsa.pub && ! -e ~/.ssh/id_dsa.pub ]] ; then
      echo "This user has no SSH key, but a SSH key is required to access the Discourse Docker container."
      read -p "Generate a SSH key? (Y/n) " -n 1 -r
      if [[ $REPLY =~ ^[Nn]$ ]] ; then
        echo
        echo WARNING: You may not be able to log in to your container.
        echo
      else
        echo
        echo Generating SSH key
        mkdir -p ~/.ssh && ssh-keygen -f ~/.ssh/id_rsa -t rsa -N ''
        echo
      fi
    fi
  fi

  ssh_pub_key="$(cat ~/.ssh/id_rsa.pub 2>/dev/null || cat ~/.ssh/id_dsa.pub)"
}


install_docker() {

  echo "Docker is not installed, make sure you are running on the 3.8 kernel"
  echo "The best supported Docker release is Ubuntu 12.04.03 for it run the following"
  echo
  echo "sudo apt-get update"
  echo "sudo apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring"
  echo "sudo reboot"
  echo

  echo "sudo sh -c \"wget -qO- https://get.docker.io/gpg | apt-key add -\""
  echo "sudo sh -c \"echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\""
  echo "sudo apt-get update"
  echo "sudo apt-get install lxc-docker"

  exit 1
}

set_volumes() {
  volumes=`cat $config_file | $docker_path run --rm -i -a stdout -a stdin $image ruby -e \
        "require 'yaml'; puts YAML.load(STDIN.readlines.join)['volumes'].map{|v| '-v ' << v['volume']['host'] << ':' << v['volume']['guest'] << ' '}.join"`
}

set_template_info() {

    templates=`cat $config_file | $docker_path run --rm -i -a stdin -a stdout $image ruby -e \
      "require 'yaml'; puts YAML.load(STDIN.readlines.join)['templates']"`


    arrTemplates=(${templates// / })
    config_data=$(cat $config_file)

    input="hack: true"


    for template in "${arrTemplates[@]}"
    do
      [ ! -z $template ] && {
        input="$input _FILE_SEPERATOR_ $(cat $template)"
      }
    done

    # we always want our config file last so it takes priority
    input="$input _FILE_SEPERATOR_ $config_data"

    read -r -d '' env_ruby << 'RUBY'
    require 'yaml'

    input=STDIN.readlines.join
    env = {}
    input.split('_FILE_SEPERATOR_').each do |yml|
       yml.strip!
       begin
         env.merge!(YAML.load(yml)['env'] || {})
       rescue => e
        puts yml
        p e
       end
    end
    puts env.map{|k,v| "-e\n#{k}=#{v}" }.join("\n")
RUBY

    raw=`exec echo "$input" | $docker_path run --rm -i -a stdin -a stdout $image ruby -e "$env_ruby"`

    env=()
    while read i; do
      if [ -n "$i" ]; then
        env[${#env[@]}]=$i
      fi
    done <<< "$raw"

    echo "Calculated ENV: ${env[@]}"
}

[ -z $docker_path ] && {
  install_docker
}


[ $# -lt 2 ] && {
  usage
}

if [ ! -e $config_file ]
  then
    echo "Config file was not found, ensure $config_file exists"
    exit 1
fi


run_mailtest(){
  if [ ! -e $config_file ]; then
    echo "Config does not exist: $config_file" >&2
    exit 1
  fi
  exec scripts/mailtest $config_file
}

run_stop(){
   $docker_path stop -t 10 $config
}

run_start(){
  if $docker_path inspect $config &> /dev/null
     then
       $docker_path start $config
     else
       echo "Creating a new container..."
       ports=`cat $config_file | $docker_path run --rm -i -a stdout -a stdin $image ruby -e \
              "require 'yaml'; puts YAML.load(STDIN.readlines.join)['expose'].map{|p| '-p ' << p.to_s << ' '}.join"`

       set_volumes

       $docker_path run -h "`hostname`-$config" -e DOCKER_HOST_IP=$docker_ip --name $config -t $ports \
                  -d $volumes $local_discourse/$config /usr/bin/runsvdir -P /etc/service

       exit 0
  fi

}

run_bootstrap(){
  get_ssh_pub_key

  # Is the image available?
  # If not, pull it here so the user is aware what's happening.
  $docker_path history $image >/dev/null 2>&1 || $docker_path pull $image

  set_template_info

  base_image=`cat $config_file | $docker_path run --rm -i -a stdin -a stdout $image ruby -e \
    "require 'yaml'; puts YAML.load(STDIN.readlines.join)['base_image']"`

  update_pups=`cat $config_file | $docker_path run --rm -i -a stdin -a stdout $image ruby -e \
    "require 'yaml'; puts YAML.load(STDIN.readlines.join)['update_pups']"`

  if [[ ! X"" = X"$base_image" ]]; then
    image=$base_image
  fi

  set_volumes

  run_command="cd /pups &&"
  if [[ ! "false" =  $update_pups ]]; then
    run_command="$run_command git pull &&"
  fi
  run_command="$run_command /pups/bin/pups --stdin"

  echo $run_command

  env=("${env[@]}" "-e" "SSH_PUB_KEY=$ssh_pub_key")

  (exec echo "$input" | $docker_path run "${env[@]}" -e DOCKER_HOST_IP=$docker_ip --name $config-bootstrap -i -a stdin -a stdout -a stderr $volumes $image \
     /bin/bash -c "$run_command") \
     || ($docker_path rm $config-bootstrap && echo "FAILED TO BOOTSTRAP" && exit 1)

  sleep 5

  $docker_path commit $config-bootstrap $local_discourse/$config || echo 'FAILED TO COMMIT'
  $docker_path rm $config-bootstrap
}

case "$command" in
  bootstrap)
      run_bootstrap
      echo "Successfully bootstrapped, to startup use ./launcher start $config"
      exit 0
      ;;

  mailtest)
      run_mailtest
      exit 0
      ;;

  ssh)
      address="`$docker_path port $config 22`"
      split=(${address//:/ })
      exec ssh -o StrictHostKeyChecking=no root@${split[0]} -p ${split[1]}
      ;;

  stop)
      run_stop
      exit 0
      ;;

  logs)
      exec $docker_path logs $config
      ;;

  restart)
      run_stop
      run_start
      exit 0
      ;;

  start)
      run_start
      exit 0
      ;;

  rebuild)
      echo "Stopping old container"
      $docker_path stop -t 10 $config

      run_bootstrap

      $docker_path rm $config

      run_start
      exit 0
      ;;


  destroy)
      echo "destroying container $config"
      $docker_path stop -t 10 $config
      $docker_path rm $config
      exit 0
      ;;
esac

usage
